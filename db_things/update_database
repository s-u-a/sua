#!/usr/bin/php
<?php
	chdir(dirname(__FILE__));

	$USE_OB = false;
	require('../engine/include.php');

	set_time_limit(0);

	if(!isset($_SERVER['argv'][1]))
	{
		echo "Usage: ".$_SERVER['argv'][0]." <Database ID>\n";
		exit(1);
	}
	else
	{
		$databases = get_databases();
		if(!define_globals($_SERVER['argv'][1]))
		{
			echo "Unknown database.\n";
			exit(1);
		}
	}

	# Alte Konstanten wiederherstellen
	global_setting("DB_MESSAGES", global_setting("DB_DIR")."/messages");
	global_setting("EVENT_FILE", global_setting("DB_DIR")."/events");
	global_setting("DB_HIGHSCORES", global_setting("DB_DIR")."/highscores");
	global_setting("DB_HIGHSCORES_ALLIANCES", global_setting("DB_DIR")."/highscores_alliances");
	global_setting("DB_HIGHSCORES_ALLIANCES2", global_setting("DB_DIR")."/highscores_alliances2");

	# Aktuelle Datenbankversion herausfinden
	$current_version = get_database_version();

	# Version, auf die aktualisiert werden muss
	$newest_version = global_setting("DATABASE_VERSION");

	fputs(STDERR, "Current database version seems to be ".$current_version.".\n");
	if($current_version >= $newest_version)
	{
		fputs(STDERR, "No update needed, exiting.\n");
		exit(0);
	}

	class version3
	{ # Alte Funktionen wiederherstellen, die benoetigt werden, um auf Version 3 zu updaten
		static function decodeUserHighscoresString($string)
		{
			$username = trim(substr($string, 0, 24));
			$alliance = trim(substr($string, 24, 6));
			$points_str = substr($string, 30);

			$points_bin = '';
			for($i = 0; $i < strlen($points_str); $i++)
			$points_bin .= add_nulls(decbin(ord($points_str[$i])), 8);

			$points = base_convert($points_bin, 2, 10);

			return array($username, $points, $alliance);
		}

		static function decodeAllianceHighscoresString($info)
		{
			$alliancename = trim(substr($info, 0, 6));

			$members_str = substr($info, 6, 4);
			$members_bin = '';
			for($i=0; $i < strlen($members_str); $i++)
			$members_bin .= add_nulls(decbin(ord($members_str[$i])), 8);
			$members = base_convert($members_bin, 2, 10);

			$average_str = substr($info, 10, 8);
			$average_bin = '';
			for($i=0; $i < strlen($average_str); $i++)
			$average_bin .= add_nulls(decbin(ord($average_str[$i])), 8);
			$average = base_convert($average_bin, 2, 10);

			$overall_str = substr($info, 18, 8);
			$overall_bin = '';
			for($i=0; $i < strlen($overall_str); $i++)
			$overall_bin .= add_nulls(decbin(ord($overall_str[$i])), 8);
			$overall = base_convert($overall_bin, 2, 10);

			return array($alliancename, $members, $average, $overall);
		}
	}

	switch($current_version)
	{
		#######################
		### Version 1 auf 2 ###
		#######################
		case 1:
		{
			# GZip-Dateien auf BZip2-Dateien umstellen
			$fnames = array();

			$dh = opendir(global_setting("DB_PLAYERS"));
			while(($fname = readdir($dh)) !== false)
			{
				if($fname == '.' || $fname == '..') continue;
				$fnames[] = global_setting("DB_PLAYERS").'/'.$fname;
			}
			closedir($dh);

			$dh = opendir(global_setting("DB_ALLIANCES"));
			while(($fname = readdir($dh)) !== false)
			{
				if($fname == '.' || $fname == '..') continue;
				$fnames[] = global_setting("DB_ALLIANCES").'/'.$fname;
			}
			closedir($dh);

			$dh = opendir(global_setting("DB_MESSAGES"));
			while(($fname = readdir($dh)) !== false)
			{
				if($fname == '.' || $fname == '..') continue;
				$fnames[] = global_setting("DB_MESSAGES").'/'.$fname;
			}
			closedir($dh);

			$dh = opendir(global_setting("DB_MESSAGES_PUBLIC"));
			while(($fname = readdir($dh)) !== false)
			{
				if($fname == '.' || $fname == '..') continue;
				$fnames[] = global_setting("DB_MESSAGES_PUBLIC").'/'.$fname;
			}
			closedir($dh);

			foreach($fnames as $fname)
			{
				$file = gzuncompress(file_get_contents($fname));

				$fh = fopen($fname, 'w');
				flock($fh, LOCK_EX);

				fwrite($fh, bzcompress($file, 6));

				flock($fh, LOCK_UN);
				fclose($fh);
			}

			# fleets-Verzeichnis anlegen
			if(!file_exists(global_setting("DB_FLEETS"))) mkdir(global_setting("DB_FLEETS"), 0777);
		}


		#######################
		### Version 2 auf 3 ###
		#######################

		case 2:
		{
			# events-Datei auf SQLite umstellen
			$events_old = global_setting("EVENT_FILE").'.bkp.'.time();
			if(is_file(global_setting("EVENT_FILE")) && rename(global_setting("EVENT_FILE"), $events_old))
			{
				$events_new = Classes::EventFile();
				$fh = fopen($events_old, 'r');
				while(($line = fgets($fh, 1024)) !== false)
				{
					$line = explode("\t", $line, 2);
					if(count($line) < 2) continue;
					$events_new->addNewFleet($line[0], $line[1]);
				}
				fclose($fh);
			}
		}

		#######################
		### Version 3 auf 4 ###
		#######################

		case 3:
		{
			# Highscores-Dateien auf SQLite umstellen
			$hs_old1 = global_setting("DB_HIGHSCORES");
			$hs_old2 = global_setting("DB_HIGHSCORES_ALLIANCES");
			$hs_old3 = global_setting("DB_HIGHSCORES_ALLIANCES2");
			$hs_suffix = '.bkp.'.time();
			if((!is_file($hs_old1) || rename($hs_old1.$hs_suffix)) && (!is_file($hs_old2) || rename($hs_old2, $hs_old2.$hs_suffix)) && (!is_file($hs_old3) || rename($hs_old3, $hs_old3.$hs_suffix)))
			{
				$highscores_new = Classes::Highscores();
				$fh = fopen($hs_old1.$hs_suffix, 'r');
				while($part = fread($fh, 38))
				{
					$part_info = version3::decodeUserHighscoresString($part);
					$highscores_new->updateUser($part_info[0], $part_info[2], $part_info[1]);
				}
				fclose($fh);
				$fh = fopen($hs_old2.$hs_suffix, 'r');
				while($part = fread($fh, 26))
				{
					$part_info = version3::decodeAllianceHighscoresString($part);
					$highscores_new->updateAlliance($part_info[0], $part_info[2], $part_info[3], $part_info[1]);
				}
				fclose($fh);
			}
		}

		#######################
		### Version 4 auf 5 ###
		#######################

		case 4:
		{
			# strtolower auf Users und Alliances
			$dh = opendir(global_setting("DB_PLAYERS"));
			while(($fname = readdir($dh)) !== false)
			{
				if($fname == '.' || $fname == '..') continue;
				$old_fname = global_setting("DB_PLAYERS").'/'.$fname;
				$new_fname = global_setting("DB_PLAYERS").'/'.strtolower($fname);
				if($old_fname == $new_fname) continue;
				if(file_exists($new_fname)) fputs(STDERR, "Skipped ".$old_fname.", ".$new_fname." already exists. Please fix this manually.\n");
				else rename($old_fname, $new_fname);
			}
			closedir($dh);
			$dh = opendir(global_setting("DB_ALLIANCES"));
			while(($fname = readdir($dh)) !== false)
			{
				if($fname == '.' || $fname == '..') continue;
				$old_fname = global_setting("DB_ALLIANCES").'/'.$fname;
				$new_fname = global_setting("DB_ALLIANCES").'/'.strtolower($fname);
				if($old_fname == $new_fname) continue;
				if(file_exists($new_fname)) fputs(STDERR, "Skipped ".$old_fname.", ".$new_fname." already exists. Please fix this manually.\n");
				else rename($old_fname, $new_fname);
			}
			closedir($dh);
		}

		#######################
		### Version 5 auf 6 ###
		#######################

		case 5:
		{
			# Datenbanken zusammenfassen
			$sqlite = array(
				global_setting("DB_HIGHSCORES") => array("highscores_users" => array("username", "alliance", "scores INT", "changed INT"), "highscores_alliances" => array("tag", "scores_average INT", "scores_total INT", "members_count INT", "changed INT")),
				global_setting("EVENT_FILE") => array("events" => array("time INT", "fleet")),
			);

			$new_dbh = sqlite_popen(global_setting("DB_SQLITE"));

			foreach($sqlite as $fname=>$tables)
			{
				$dbh = sqlite_open($fname);
				foreach($tables as $table=>$fields)
				{
					sqlite_query($new_dbh, "CREATE TABLE ".$table." ( ".implode(", ", $fields).");");
					$query = sqlite_query($dbh, "SELECT * FROM ".$table.";");
					while($row = sqlite_fetch_array($query, SQLITE_ASSOC))
					{
						$values = array();
						foreach($row as $v)
							$values[] = "'".sqlite_escape_string($v)."'";
						sqlite_query($new_dbh, "INSERT INTO ".$table." ( ".implode(", ", array_keys($row))." ) VALUES ( ".implode(", ", $values)." );");
					}
				}
				sqlite_close($dbh);
				unlink($fname);
			}

			# Nachrichten umwandeln
			$messages = array("message_id PRIMARY KEY", "time INT", "text", "parsed_text", "sender", "users", "subject", "html INT");
			sqlite_query($new_dbh, "CREATE TABLE messages ( ".implode(", ", $messages)." );");
			$dh = opendir(global_setting("DB_MESSAGES"));
			while(($fname = readdir($dh)) !== false)
			{
				$location = global_setting("DB_MESSAGES")."/".$fname;
				if(!is_file($location) || !is_readable($location))
					continue;

				$arr = unserialize(bzdecompress(file_get_contents($location)));
				if(!isset($arr['users'])) continue;
				$query = "INSERT INTO messages ( message_id, time, text, parsed_text, sender, users, subject, html ) VALUES ( ";

				$query .= "'".sqlite_escape_string(urldecode($fname))."', ";

				if(isset($arr['time'])) $query .= "'".sqlite_escape_string($arr['time'])."', ";
				else $query .= "'', ";

				if(isset($arr['text'])) $query .= "'".sqlite_escape_string($arr['text'])."', ";
				else $query .= "'', ";

				if(isset($arr['parsed'])) $query .= "'".sqlite_escape_string($arr['parsed'])."', ";
				else $query .= "'', ";

				if(isset($arr['from'])) $query .= "'".sqlite_escape_string($arr['from'])."', ";
				else $query .= "'', ";

				$u = array();
				foreach($arr['users'] as $username=>$type)
					$u[] = $username."\r".$type;
				$query .= "'".sqlite_escape_string(implode("\n", $u))."', ";

				if(isset($arr['subject'])) $query .= "'".sqlite_escape_string($arr['subject'])."', ";
				else $query .= "'', ";

				if(isset($arr['html'])) $query .= "'".sqlite_escape_string($arr['html'] ? '1' : '0')."' );";
				else $query .= "'0' );";

				sqlite_query($new_dbh, $query);
			}
			closedir($dh);

			try
			{
				rm_r(global_setting("DB_DIR")."/messages");
			}
			catch(FilesystemException $exc)
			{
				fputs(STDERR, "Warning: Could not delete the message database directory: ".$exc->getMessage()."\n");
			}
		}
		#######################
		### Version 6 auf 7 ###
		#######################

		case 6:
		{
			if(!is_writeable(global_setting("DB_DIR")))
			{
				fputs(STDERR, "Error: ".global_setting("DB_DIR")." is not writeable.\n");
				exit(1);
			}

			$bkp_fname = global_setting("DB_SQLITE").".bkp.".time();
			if(!rename(global_setting("DB_SQLITE"), $bkp_fname))
			{
				fputs(STDERR, "Error: Could not rename ".global_setting("DB_SQLITE").".\n");
				exit(1);
			}

			sqlite2sqlite3($bkp_fname, global_setting("DB_SQLITE"));

			fputs(STDERR, "Updated ".global_setting("DB_SQLITE")." to SQLite 3, a backup was placed into ".$bkp_fname.".\n\n");
			fputs(STDERR, "Important! Please update database.global/notifications if you haven't already done so:\n");
			fputs(STDERR, "mv notifications notifications.sav; sqlite notifications.sav .dump | sqlite3 notifications\n\n");
		}
	}

	fputs(STDERR, "Database version is now ".$newest_version.".\n");
	$fh = fopen(global_setting("DB_DIR").'/.version', 'w');
	if(!$fh) fputs(STDERR, "Please put ".$newest_version." into ".global_setting("DB_DIR")."/.version manually.\n");
	else
	{
		fwrite($fh, $newest_version);
		fclose($fh);
	}
	exit(0);
?>
