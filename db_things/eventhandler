#!/usr/bin/php
<?php
	$USE_OB = false;
	require('../engine/include.php');
	
	set_time_limit(0);
	
	if(!isset($_SERVER['argv'][1]))
	{
		echo "Usage: ".$_SERVER['argv'][0]." [Database dir]\n";
		exit(1);
	}
	else
		define_globals($_SERVER['argv'][1]);
	
	__autoload('Classes');
	__autoload('Fleet');
	__autoload('Galaxy');
	
	$fposition = 0;
	
	while(true)
	{
		clearstatcache();
		$fh = fopen(EVENT_FILE, 'r+');
		#flock($fh, LOCK_EX);
		fseek($fh, $fposition, SEEK_SET);
		echo "--- Running.\n";
		while(($line = fgets($fh, 1024)) !== false)
		{
			$strlen = strlen($line);
			echo "--- Getting line. Length ".$strlen.".\n";
			$line = trim($line);
			if(!$line) continue;
			
			$line = explode("\t", $line, 2);
			if(count($line) != 2) continue;
			
			echo "--- Event time ".$line[0].", local time ".time().".\n";
			if($line[0] > time())
			{
				echo "--- Seeking back.\n";
				fseek($fh, -$strlen, SEEK_CUR);
				break;
			}
			
			echo "Processing fleet ".$line[1]."...\n";
			
			$fleet = Classes::Fleet($line[1]);
			$users = $fleet->getUsersList();
			echo "--- Fleet status is ".$fleet->getStatus().".\n";
			if($fleet->getStatus() != 1) continue;
			while($fleet->getStatus() == 1 && $fleet->getNextArrival() < time())
			{
				if($fleet->arriveAtNextTarget())
				{
					echo "Fleet ".$line[1]." arrived.\n";
					#echo ftell($fh)."\n";
					fseek($fh, -$strlen, SEEK_CUR);
					#echo ftell($fh)."\n";
					#echo filesize(EVENT_FILE)."\n";
					fwrite($fh, str_repeat(' ', $strlen-1)."\n");
					#clearstatcache();
					#echo filesize(EVENT_FILE)."\n";
					#echo ftell($fh)."\n";
				}
				else
				{
					echo "ERROR (Fleet ".$line[1].")\n";
					break;
				}
			}
			unset($fleet);
			
			# Instanzen zuruecksetzen
			Classes::resetInstances('User');
			Classes::resetInstances('Alliance');
			Classes::resetInstances('Message');
			Classes::resetInstances('Fleet');
		}
		
		echo "Reached end of file.\n";
		
		$fposition = ftell($fh);
		#flock($fh, LOCK_UN);
		fclose($fh);
		
		# Instanzen zuruecksetzen
		Classes::resetInstances();
		
		sleep(EVENTHANDLER_INTERVAL);
	}
?>