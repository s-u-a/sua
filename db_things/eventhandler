#!/usr/bin/php
This program is free software; you can redistribute it and/or modify it under the terms of the AFFERO GENERAL PUBLIC LICENSE as published by Affero Inc.; either version 1 of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the AFFERO GENERAL PUBLIC LICENSE for more details.
You should have received a copy of the AFFERO GENERAL PUBLIC LICENSE along with this program; if not, write to Affero Inc., 510 Third Street - Suite 225, San Francisco, CA 94107, USA or have a look at http://www.affero.org/oagpl.html.

<?php
	###########################
	### Parameter auswerten ###
	###########################

	{
		chdir(dirname(__FILE__));
		chdir('..');

		$print_usage = false;
		$error = false;
		$daemon = false;
		$verbose = 0;
		$handelskurs_only = false;

		$getopt_exists = false;
		foreach(explode(':', get_include_path()) as $path)
		{
			if(is_file($path.'/Console/Getopt.php') && is_readable($path.'/Console/Getopt.php'))
			{
				$getopt_exists = true;
				break;
			}
		}

		if($getopt_exists)
		{
			require_once('Console/Getopt.php'); # PEAR
			$options = Console_Getopt::getopt($_SERVER['argv'], 'hdDvqe', array('help', 'daemon', 'no-daemon', 'verbose', 'quiet', 'handelskurs'));
			if($options instanceof PEAR_Error)
			{
				fputs(STDERR, $options->message."\n");
				exit(1);
			}

			foreach($options[0] as $o)
			{
				switch($o[0])
				{
					case 'h': case '--help':
						$print_usage = true;
						break;
					case 'd': case '--daemon':
						$daemon = true;
						break;
					case 'D': case '--no-daemon':
						$daemon = false;
						break;
					case 'v': case '--verbose':
						$verbose++;
						break;
					case 'q': case '--quiet':
						$verbose--;
						break;
					case 'e': case '--handelskurs':
						$handelskurs_only = true;
						break;
				}
			}
		}
		else fputs(STDERR, "Warning: PEAR package Console_Getopt does not exist. Switching to default options.\n\n");

		if($print_usage || $error)
		{
			if($error) $stream = STDERR;
			else $stream = STDOUT;

			fputs($stream, <<<EOF
Usage: {$_SERVER['argv'][0]} [Options]
Options:
  -h, --help:         Display this help and exit
  -d, --daemon:       Run in background
  -D, --no-daemon:    Do not run in background (default)
  -v, --verbose:      Verbose output
  -q, --quiet:        Quiet output
  -e, --handelskurs:  Calculate Handelskurs and exit

EOF
			);

			if($error) exit(1);
			else exit(0);
		}


		$USE_OB = false;
		require('engine/include.php');

		# TODO: Rausnehmen
		language("de_DE");

		set_time_limit(0);

		if(!touch(global_setting("DB_EVENTHANDLER_PIDFILE")) || !($fh_pid = fopen(global_setting("DB_EVENTHANDLER_PIDFILE"), 'r+')))
		{
			fputs(STDERR, "Error, couldn't create pid file ".global_setting("DB_EVENTHANDLER_PIDFILE").".\n");
			exit(1);
		}

		if(!flock($fh_pid, LOCK_EX + LOCK_NB))
		{
			fputs(STDERR, "Error, another instance seems already to be running. The PID seems to be ".trim(file_get_contents(global_setting("DB_EVENTHANDLER_PIDFILE"))).".\n");
			exit(1);
		}

		ftruncate($fh_pid, 0);

		$databases = get_databases();

		if($daemon) $errlog = fopen(global_setting("DB_EVENTHANDLER_LOG"), 'a');
		else $errlog = STDERR;

		__autoload('Classes');
		__autoload('Fleet');
		__autoload('Galaxy');
	}

	################
	### Routinen ###
	################

	{

		function time_prefix()
		{
			global $selected_database;

			$prefix = date('Y-m-d, H:i:s')."\t";
			#if(isset($selected_database) && $selected_database)
			#	$prefix .= $selected_database."\t";
			return $prefix;
		}

		function check_termination()
		{
			global $errlog;
			global $fh_pid;
			global $daemon;
			global $handelskurs_only;

			if(defined('terminate') && terminate)
			{
				fputs($errlog, time_prefix()."Terminated.\n\n");

				ftruncate($fh_pid, 0);
				flock($fh_pid, LOCK_UN);
				fclose($fh_pid);
				if($daemon) fclose($errlog);

				exit(0);
			}
		}

	}

	########################
	### Prozesskontrolle ###
	########################

	{

		if($daemon)
		{
			declare(ticks=1);

			if(function_exists('pcntl_fork')) $pid = pcntl_fork();
			else $pid = -1;

			if($pid == -1)
				fputs(STDERR, time_prefix()."Forking failed, continuing.\n");
			elseif($pid)
			{
				fputs(STDOUT, time_prefix()."Eventhandler forked, PID ".$pid.".\n");
				exit(0);
			}
		}

		fwrite($fh_pid, getmypid()."\n");

		function error_handler($errno, $errstr, $errfile, $errline, $errcontext)
		{
			global $errlog;
			fputs($errlog, time_prefix());
			switch($errno)
			{
				case E_ERROR:
					fputs($errlog, "Fatal error: ");
				case E_WARNING:
					fputs($errlog, "Warning: ");
					break;
				case E_NOTICE:
					fputs($errlog, "Notice: ");
					break;
				default:
					fputs($errlog, "Error ".$errno.": ");
					break;
			}

			fputs($errlog, $errstr);
			fputs($errlog, " in ".$errfile." on line ".$errline.".");

			global $process;
			if(isset($process) && isset($process['fleet']))
				fputs($errlog, " Last fleet was ".$process['fleet'].".");

			fputs($errlog, "\n");

			if($errno == E_ERROR)
				exit(1);
		}

		function sig_handler($signo)
		{
			global $errlog;
			global $databases;
			switch($signo)
			{
				case SIGTERM:
					fputs($errlog, time_prefix()."SIGTERM (".SIGTERM.")\n");
					if(!defined('terminate')) define('terminate', true);
					break;
				case SIGINT:
					fputs($errlog, time_prefix()."SIGINT (".SIGINT.")\n");
					if(!defined('terminate')) define('terminate', true);
					break;
				case SIGHUP:
					fputs($errlog, time_prefix()."SIGHUP (".SIGHUP.")\n");
					break;
				case SIGUSR1:
					fputs($errlog, time_prefix()."SIGUSR1 (".SIGUSR1.")\n");

					fputs($errlog, time_prefix()."Rescanning databases... ");
					global $databases;
					$databases = get_databases(true);
					fputs($errlog, "Done\n");

					break;
				case SIGUSR2:
					fputs($errlog, time_prefix()."SIGUSR2 (".SIGUSR2.")\n");
					foreach($databases as $selected_database=>$dbinfo)
					{
						if(!is_dir($dbinfo['directory']) || /*!$dbinfo['enabled'] ||*/ $dbinfo['dummy']) continue;

						define_globals($selected_database);
						walkthrough_users($dbinfo['enabled']);
						check_termination();
						Classes::resetInstances();
					}
					break;
			}
		}

		if(function_exists('pcntl_signal'))
		{
			pcntl_signal(SIGTERM, "sig_handler");
			pcntl_signal(SIGINT, "sig_handler");
			pcntl_signal(SIGUSR1, "sig_handler");
			pcntl_signal(SIGUSR2, "sig_handler");
			if($daemon)
			{
				pcntl_signal(SIGHUP, "sig_handler");
				if(function_exists('posix_setsid'))
					posix_setsid();
			}
		}

		set_error_handler('error_handler', E_ERROR | E_WARNING | E_NOTICE);

	}

	##########################
	### Spezielle Routinen ###
	##########################

	{
		function arrive($fleet_id)
		{
			global $errlog;

			if(function_exists('pcntl_fork'))
			{
				Classes::resetInstances();
				$pid = pcntl_fork();
			}
			else $pid = -1;

			if(!$pid || $pid == -1)
			{
				#if($pid != -1) set_time_limit(600);

				$fleet = Classes::Fleet($fleet_id);

				if($fleet->getStatus() > 0)
				{
					try
					{
						if($fleet->getStatus() > 1)
							throw new Exception("Status was ".$fleet->getStatus().".");
						elseif($fleet->getNextArrival() > time())
							throw new Exception("Has not yet arrived.");
						elseif(!$fleet->arriveAtNextTarget())
							throw new Exception("Arrival failed.");
					}
					catch(Exception $e)
					{
						fputs($errlog, time_prefix()."Warning: Couldn't complete fleet ".$fleet_id.". ".$e->getMessage()." Gonna process it later.\n");
						$eventfile = Classes::EventFile();
						$eventfile->addNewFleet(time()+global_setting("EVENTHANDLER_INTERVAL"), $fleet_id);
					}
				}

				unset($fleet);

				Classes::resetInstances();
				if($pid != -1) exit(0);
			}
			else pcntl_waitpid($pid, &$status);
		}

		function walkthrough_users($send_mails=true)
		{
			global $errlog;
			global $databases;
			global $verbose;

			fputs($errlog, "\n".time_prefix()."Walking through users for database ".global_setting("DB")."...\n");

			# Rohstoffe aller Planeten aller Benutzer zusammenzaehlen
			# Alte Nachrichten loeschen
			$ges_ress = array(0, 0, 0, 0, 0);
			$deleted_messages = 0;
			$processed_messages = 0;
			$linked_messages = 0;
			$linked_messages_list = array_pad(array(), Message::getMessagesCount(), "");

			global $message_type_times;
			$max_ages = $message_type_times;
			foreach($max_ages as $k=>$v) $max_ages[$k] *= 86400;

			$dh = opendir(global_setting("DB_PLAYERS"));
			while(($filename = readdir($dh)) !== false)
			{
				if(!is_file(global_setting("DB_PLAYERS").'/'.$filename))
					continue;

				if($verbose) fputs($errlog, time_prefix()."Processing user ".urldecode($filename)."\n");
				$user = Classes::User(urldecode($filename));
				if(!$user->getStatus())
				{
					if($verbose) fputs($errlog, time_prefix()."Failed.\n");
					continue;
				}

				$last_activity = $user->getLastActivity();
				if($last_activity !== false)
					$days = ceil((time()-$last_activity)/86400);
				else
					$days = ceil((time()-$user->getRegistrationTime())/86400);

				$today = date('Y-m-d');

				# Wenn der Spieler inaktiv ist, loeschen
				if($last_activity !== false)
				{
					if($user->umode())
					{
						if($days == 175 && $user->lastMailSent() != $today) # 25 Wochen: Nachricht
						{
							if($verbose) fputs($errlog, time_prefix()."  User is inactive. ");
							if($send_mails && $user->checkSetting('email'))
							{
								mail($user->checkSetting('email'), "=?utf-8?q?Accountinaktivit=C3=A4t_in?= S-U-A", "Sie erhalten diese Nachricht, weil Sie sich seit geraumer Zeit nicht mehr in Stars Under Attack in ".$databases[global_setting("DB")]['name']." angemeldet haben. Sie haben zwei Wochen Zeit, sich anzumelden, danach wird Ihr Account einer automatischen L\xc3\xb6schung unterzogen.\n\nDas Spiel erreichen Sie unter http://s-u-a.net/ \xe2\x80\x93 Ihr Benutzername lautet ".$user->getName(), "Content-Type: text/plain;\r\n  charset=\"utf-8\"\r\nFrom: ".global_setting("EMAIL_FROM")."\r\nReply-To: ".global_setting("EMAIL_FROM"));
								$user->lastMailSent($today);
								if($verbose) fputs($errlog, "Sent mail.\n");
							}
							elseif($verbose) fputs($errlog, "Didn't send mail.\n");
						}
						elseif($days >= 189) # 27 Wochen: Loeschung
						{
							if($user->destroy())
								fputs($errlog, "  Deleted user `".$user->getName()."' because of inactivity.\n");
							else
								fputs($errlog, "  Error: Couldn't delete user `".$user->getName()."'.\n");
							continue;
						}
					}
					else
					{
						if(($days == 21 || $days == 34) && $user->lastMailSent() != $today)
						{
							if($verbose) fputs($errlog, time_prefix()."  User is inactive. ");
							if($send_mails && $user->checkSetting('email'))
							{
								mail($user->checkSetting('email'), "=?utf-8?q?Accountinaktivit=C3=A4t_in?= S-U-A", "Sie erhalten diese Nachricht, weil Sie sich seit geraumer Zeit nicht mehr in Stars Under Attack in ".$databases[global_setting("DB")]['name']." angemeldet haben. Sie haben ".(($days == 34) ? 'einen Tag' : 'zwei Wochen')." Zeit, sich anzumelden, danach wird Ihr Account einer automatischen L\xc3\xb6schung unterzogen.\n\nDas Spiel erreichen Sie unter http://s-u-a.net/ \xe2\x80\x93 Ihr Benutzername lautet ".$user->getName(), "Content-Type: text/plain;\r\n  charset=\"utf-8\"\r\nFrom: ".global_setting("EMAIL_FROM")."\r\nReply-To: ".global_setting("EMAIL_FROM"));
								$user->lastMailSent($today);
								if($verbose) fputs($errlog, "Sent mail.\n");
							}
							elseif($verbose) fputs($errlog, "Didn't send mail.\n");
						}
						elseif($days >= 35)
						{
							if($user->destroy())
								fputs($errlog, "  Deleted user `".$user->getName()."' because of inactivity.\n");
							else
								fputs($errlog, "  Error: Couldn't delete user `".$user->getName()."'.\n");
							continue;
						}
					}
				}
				elseif($days == 7 && $user->lastMailSent() != $today)
				{
					if($verbose) fputs($errlog, time_prefix()."  User is inactive. ");
					if($send_mails && $user->checkSetting('email'))
					{
						mail($user->checkSetting('email'), "=?utf-8?q?Accountinaktivit=C3=A4t_in?= S-U-A", "Sie erhalten diese Nachricht, weil Sie sich seit geraumer Zeit nicht mehr in Stars Under Attack in ".$databases[global_setting("DB")]['name']." angemeldet haben. Sie haben eine Woche Zeit, sich anzumelden, danach wird Ihr Account einer automatischen L\xc3\xb6schung unterzogen.\n\nDas Spiel erreichen Sie unter http://s-u-a.net/ \xe2\x80\x93 Ihr Benutzername lautet ".$user->getName(), "Content-Type: text/plain;\r\n  charset=\"utf-8\"\r\nFrom: ".global_setting("EMAIL_FROM")."\r\nReply-To: ".global_setting("EMAIL_FROM"));
						if($verbose) fputs($errlog, "Sent mail.\n");
					}
					else fputs($errlog, "Didn't send mail.\n");
				}
				elseif($days >= 14)
				{
					if($user->destroy())
						fputs($errlog, "  Deleted user `".$user->getName()."' because of inactivity.\n");
					else
						fputs($errlog, "  Error: Couldn't delete user `".$user->getName()."'.\n");
					continue;
				}

				$planets = $user->getPlanetsList();
				foreach($planets as $planet)
				{
					$user->setActivePlanet($planet);
					if($verbose) fputs($errlog, time_prefix()."  Processing planet ".$planet.".\n");
					$ress = $user->getRess();
					unset($ress[5]); # Energie soll nicht miteinberechnet werden

					if(min($ress) < 0)
					{
						fputs($errlog, time_prefix()."  Warning: Planet ".$user->getPosString()." (".$user->getName().") has negative resources.\n");
						continue;
					}

					$min = max($ress);
					if($min != 0)
					{
						foreach($ress as $val)
						{
							if($val < $min && $val != 0) $min = $val;
						}

						$ress[0] /= $min;
						$ress[1] /= $min;
						$ress[2] /= $min;
						$ress[3] /= $min;
						$ress[4] /= $min;
					}

					$ress[0] = pow($ress[0], 1/($days+1));
					$ress[1] = pow($ress[1], 1/($days+1));
					$ress[2] = pow($ress[2], 1/($days+1));
					$ress[3] = pow($ress[3], 1/($days+1));
					$ress[4] = pow($ress[4], 1/($days+1));

					$ges_ress[0] += $ress[0];
					$ges_ress[1] += $ress[1];
					$ges_ress[2] += $ress[2];
					$ges_ress[3] += $ress[3];
					$ges_ress[4] += $ress[4];
				}

				$message_categories = $user->getMessageCategoriesList();
				foreach($message_categories as $category)
				{
					$max_diff = $max_ages[$category];
					$messages_list = $user->getMessagesList($category);
					foreach($messages_list as $message_id)
					{
						$processed_messages++;
						if($user->checkMessageStatus($message_id, $category) && $category != 8)
						{
							if(!isset($linked_messages_list[$message_id]))
							{
								$linked_messages_list[$message_id] = true;
								$linked_messages++;
							}
							continue; # Ungelesen / Archiviert
						}
						$message_obj = Classes::Message($message_id);
						if(!$message_obj->getStatus() || (time()-$message_obj->getTime()) > $max_diff)
						{
							$user->removeMessage($message_id, $category);
							$deleted_messages++;
							if($verbose) fputs($errlog, time_prefix()."  Deleted message ".$message_id.".\n");
						}
						elseif(!isset($linked_messages_list[$message_id]))
						{
							$linked_messages_list[$message_id] = true;
							$linked_messages++;
						}
					}
				}

				if($verbose) fputs($errlog, time_prefix()."  Cleaning up.\n");
				unset($user);
				Classes::resetInstances();
				if($verbose) fputs($errlog, time_prefix()."  Cleaned up.\n");

				check_termination();
			}
			closedir($dh);

			if($verbose) fputs($errlog, time_prefix()."Calculating Handelskurs.\n");

			# Kurs berechnen
			$min = max($ges_ress);
			if($min != 0)
			{
				foreach($ges_ress as $val)
				{
					if($val < $min && $val != 0)
						$min = $val;
				}
			}

			if($min == 0)
				$kurs = array(10, 5, 3.75, 2.5, 1);
			else
			{
				$kurs = array();
				$kurs[0] = $ges_ress[0]/$min;
				$kurs[1] = $ges_ress[1]/$min;
				$kurs[2] = $ges_ress[2]/$min;
				$kurs[3] = $ges_ress[3]/$min;
				$kurs[4] = $ges_ress[4]/$min;

				foreach($kurs as $key=>$val)
				{
					if($val == 0)
						$kurs[$key] = 1;
				}
			}

			unset($ges_ress);

			# Kurs schreiben
			$handelskurs = preg_split("/\r\n|\r|\n/", file_get_contents(global_setting("DB_HANDELSKURS")));
			$handelskurs[0] = $kurs[0];
			$handelskurs[1] = $kurs[1];
			$handelskurs[2] = $kurs[2];
			$handelskurs[3] = $kurs[3];
			$handelskurs[4] = $kurs[4];

			if($verbose) fputs($errlog, time_prefix()."  The new Handelskurs is:\n".print_r($handelskurs, true)."\n");

			$fh = fopen(global_setting("DB_HANDELSKURS"), 'w');
			flock($fh, LOCK_EX);

			fwrite($fh, implode("\n", $handelskurs));

			flock($fh, LOCK_UN);
			fclose($fh);

			fputs($errlog, "Handelskurs recalculated.\n");

			Classes::resetInstances();

			fputs($errlog, "Checked ".$processed_messages." messages.\n");
			fputs($errlog, "Deleted ".$deleted_messages." messages.\n");

			if($verbose) fputs($errlog, time_prefix()." Verifying message count.\n");

			$existing_messages = Message::getMessagesCount();
			if($existing_messages > $linked_messages)
			{
				fputs($errlog, time_prefix()." There are ".$existing_messages." messages in the database, but only ".$linked_messages." are referenced in the user accounts, cleaning up ghost messages...\n");
				$message_db = new MessageDatabase();
				fputs($errlog, time_prefix()." Deleted ".$message_db->cleanUp(&$linked_messages_list)." ghost messages.\n");
			}
			elseif($verbose)
				fputs($errlog, time_prefix()." Referring messages count ".$linked_messages." matches database messages count.\n");

			check_termination();


			# Oeffentliche Nachrichten loeschen

			__autoload("PublicMessage");
			$pmdb = new PublicMessageDatabase();

			$processed_messages_public = $pmdb->messagesCount();
			$deleted_messages_public = $pmdb->cleanUp();

			fputs($errlog, "Checked ".$processed_messages_public." public messages.\n");
			fputs($errlog, "Deleted ".$deleted_messages_public." public messages.\n");

			fputs($errlog, time_prefix()."Finished.\n\n");
		}
	}


	if($handelskurs_only)
	{
		foreach($databases as $selected_database=>$dbinfo)
		{
			if(!is_dir($dbinfo['directory']) || /*!$dbinfo['enabled'] ||*/ $dbinfo['dummy']) continue;

			define_globals($selected_database);
			walkthrough_users($dbinfo['enabled']);
		}
		exit(0);
	}


	#################
	### Durchlauf ###
	#################

	{
		$hostname = get_default_hostname();
		$fposition = 0;

		if(date('H')*3600+date('i')*60+60 < global_setting("EVENTHANDLER_RUNTIME")) $last_walked = false;
		else $last_walked = date('Y-m-d');

		$market_cache_refresh = global_setting('EVENTHANDLER_MARKETCACHE');
		$market_cache = array();

		fputs($errlog, time_prefix()."Eventhandler started.\n");

		while(true)
		{
			check_termination();

			$run_marketcache = false;

			if($market_cache >= global_setting('EVENTHANDLER_MARKETCACHE'))
			{
				$run_marketcache = true;
				$market_cache_run = 1;
			}
			else
				$market_cache_run++;

			# Flotten ankommen lassen
			foreach($databases as $selected_database=>$dbinfo)
			{
				if(!is_dir($dbinfo['directory']) || /*!$dbinfo['enabled'] ||*/ $dbinfo['dummy']) continue;

				define_globals($selected_database);

				$event_obj = Classes::EventFile();
				while($process = $event_obj->removeNextFleet())
				{
					arrive($process['fleet']);
					check_termination();
				}

				# Boerse abarbeiten
				$market = new Market();
				if($run_marketcache)
					$market_cache[$selected_database] = $market->getFinishingOrdersList(time()+global_setting('EVENTHANDLER_MARKETCACHE')*global_setting('EVENTHANDLER_INTERVAL'));
				check_termination();
				foreach($market_cache[$selected_database] as $order)
				{
					if($order['finish'] <= time())
						$market->finishOrder($order['id']);
					else
						break;
					check_termination();
				}

				Classes::resetInstances();
			}

			check_termination();

			# Handelskurs neu berechnen und Inaktive loeschen
			if(date('H')*3600+date('i')*60+60 > global_setting("EVENTHANDLER_RUNTIME") && $last_walked != date('Y-m-d')) // 4:30 Uhr
			{
				$last_walked = date('Y-m-d');
				if(false && function_exists('pcntl_fork'))
				{
					Classes::resetInstances();
					$pid = pcntl_fork();
				}
				else $pid = -1;

				if(!$pid || $pid == -1)
				{
					foreach($databases as $selected_database=>$dbinfo)
					{
						if(!is_dir($dbinfo['directory']) || /*!$dbinfo['enabled'] ||*/ $dbinfo['dummy']) continue;

						define_globals($selected_database);
						walkthrough_users($dbinfo['enabled']);
						check_termination();
						Classes::resetInstances();
					}
					if($pid != -1) exit(0);
				}
			}

			sleep(global_setting("EVENTHANDLER_INTERVAL"));
		}
	}
?>
