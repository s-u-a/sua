#!/usr/bin/php
    This file is part of Stars Under Attack.

    Stars Under Attack is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Stars Under Attack is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with Stars Under Attack.  If not, see <http://www.gnu.org/licenses/>.

<?php
	chdir(dirname(__FILE__));
	chdir('..');

	$USE_OB = false;

	require("engine/include.php");

	error_reporting(7);
	require_once("jabberclass/class_Jabber.php");

	set_time_limit(0);

	if(!touch(global_setting("DB_IMSERVER_PIDFILE")) || !($fh_pid = fopen(global_setting("DB_IMSERVER_PIDFILE"), 'r+')))
	{
		fputs(STDERR, "Error, couldn't create pid file ".global_setting("DB_IMSERVER_PIDFILE").".\n");
		exit(1);
	}

	if(!flock($fh_pid, LOCK_EX + LOCK_NB))
	{
		fputs(STDERR, "Error, another instance seems already to be running. The PID seems to be ".trim(file_get_contents(global_setting("DB_IMSERVER_PIDFILE"))).".\n");
		exit(1);
	}

	ftruncate($fh_pid, 0);

	# Forken, wenn moeglich
	if(!function_exists("pcntl_fork"))
		$fork = -1;
	else
	{
		while(true)
		{
			output("Forking...");
			$fork = pcntl_fork();
			if($fork)
			{
				ftruncate($fh_pid, 0);
				fwrite($fh_pid, $fork);
				pcntl_waitpid($fork, &$status);
			}
			else
				break;
		}
	}

	$jabber = new Jabber(false);
	$jabber->terminated = true;
	$imserver = new IMServer();
	$imfile = new IMFile();
	$messengers = get_messenger_info();
	$databases = get_databases();

	if(!$messengers || !isset($messengers["jabber"]))
	{
		fputs(STDERR, "No jabber account is configured.\n");
		exit(1);
	}

	$jabber->set_handler("connected", $imserver, "handleConnected");
	$jabber->set_handler("authenticated", $imserver, "handleAuthenticated");
	$jabber->set_handler("error", $imserver, "handleError");
	$jabber->set_handler("authfailure", $imserver, "handleAuthfailure");
	$jabber->set_handler("message_chat", $imserver, "handleMessage");
	$jabber->set_handler("message_normal", $imserver, "handleMessage");
	$jabber->set_handler("disconnected", $imserver, "connect");
 	//$jabber->set_handler("subscribe", $imserver, "handleSubscribe");
	$jabber->set_handler("debug_log", $imserver, "handleLog");
	$jabber->set_handler("servicefields", $imserver, "handleServicefields");
	$jabber->set_handler("heartbeat", $imserver, "handleHeartbeat");

	$imserver->connect();

	class IMServer
	{
		public function connect()
		{
			global $jabber,$messengers;

			output("Connecting to server ".$messengers["jabber"]["server"]);
			$jabber->connect($messengers["jabber"]["server"]);

			if($jabber->terminated)
			{
				output("Starting running");
				$jabber->execute(1);
			}
		}

		public function handleConnected()
		{
			global $jabber,$messengers;

			output("Connected. Logging in with username ".$messengers["jabber"]["username"]);
			$jabber->login($messengers["jabber"]["username"], $messengers["jabber"]["password"], (isset($messengers["jabber"]["resource"]) ? $messengers["jabber"]["resource"] : "daemon"));
		}

		public function handleAuthenticated()
		{
			global $jabber,$messengers;

			output("Logged in.");

			//output("Browsing for transports.");
			//$jabber->browse();

			output("Setting presence.");
			$jabber->set_presence(true, null, null, (isset($messengers["jabber"]["priority"]) ? $messengers["jabber"]["priority"] : 100));

			//output("Checking transports.");
			//foreach($messengers as $id=>$messenger)
			//{
			//	if($id == "jabber") continue;

			//	if(!isset($messenger["username_field"]) || !isset($messenger["password_field"]))
			//		$jabber->query_service_fields($messenger["server"]);
				/* Hier muesste der Transport hinzugefuegt werden. */
			//}
		}

		public function handleAuthFailure()
		{
			fputs(STDERR, "Could not log in.");
			exit(1);
		}

		function handleServicefields($fields, $packet_id, $reg_key, $reg_instructions, $reg_x)
		{
			var_dump(func_get_args());
		}

		function handleError($code, $error, $xmlns)
		{
			global $fork;

			fputs(STDERR, "Error: ".$error." (".$code.")".($xmlns ? " in ".$xmlns : "")."\n");

			if($fork === 0)
				exit(1);
		}

		function handleHeartbeat()
		{
			global $jabber,$messengers,$imfile,$databases;

			while($next_notification = $imfile->shiftNextMessage())
			{
				$to = $next_notification['uin'];
				if($next_notification['protocol'] != 'jabber')
				{
					if(!isset($messengers[$next_notification['protocol']]))
						continue;
					$to = str_replace('@', '%', $to).'@'.$messengers[$next_notification['protocol']]['server'];
				}

				$message = "Automatische Benachrichtigung von http://".get_default_hostname()."/, ".$databases[$next_notification['database']]['name'].", ".$next_notification['username'].":\n";
				$message .= $next_notification['message'];

				if($next_notification["fingerprint"])
					$message = gpg_encrypt($message, $next_notification["fingerprint"]);

				$jabber->message($to, "normal", null, $message);
			}
		}

		function handleMessage($from, $to, $message)
		{
			global $jabber,$messengers,$imfile;

			$transport = 'jabber';
			list($from_cut) = explode("/", $from);
			foreach($messengers as $tn=>$t)
			{
				if(preg_match("/^([^@]+)@".preg_quote($t['server'], '/')."\$/", $from_cut, $match))
				{
					$transport = $tn;
					$from_cut = str_replace('%', '@', $match[1]);
					break;
				}
			}

			$username = $imfile->checkCheckID($from_cut, $transport, trim($message));
			if($username && define_globals($username[1]))
			{
				$user = Classes::User($username[0]);
				$old_settings = $user->getNotificationType();
				if($user->getStatus() == 1 && $user->doSetNotificationType($from_cut, $transport))
				{
					$imfile->removeChecks($username[0]);

					if($old_settings)
						$imfile->changeUIN($username[0], $from_cut, $transport);
					else
					{
						foreach($user->getPlanetsList() as $planet)
						{
							$user->setActivePlanet($planet);
							$user->refreshMessengerBuildingNotifications();
						}
					}

					$jabber->message($from, 'normal', null, 'Accepted');
				}
				unset($user);
				Classes::resetInstances();
			}
			else $jabber->message($from, 'normal', null, 'Unrecognised command');
		}

		function handleSubscribe($packet)
		{
			var_dump($packet);
		}

		function handleLog($msg)
		{
			var_dump($msg);
		}
	}

	function output($message)
	{
		fputs(STDOUT, $message."\n");
	}
?>
