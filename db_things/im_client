#!/usr/bin/php
<?php
	$check_every_seconds = 10;

	#############
	### Setup ###
	#############

	define('DONT_EXIT', true);
	$USE_OB = false;
	set_time_limit(0);

	chdir(dirname(__FILE__));

	$print_usage = false;
	$error = false;
	$daemon = false;

	$getopt_exists = false;
	foreach(explode(':', get_include_path()) as $path)
	{
		if(is_file($path.'/Console/Getopt.php') && is_readable($path.'/Console/Getopt.php'))
		{
			$getopt_exists = true;
			break;
		}
	}

	if($getopt_exists)
	{
		require_once('Console/Getopt.php'); # PEAR
		$options = Console_Getopt::getopt($_SERVER['argv'], 'hd', array('help', 'daemon'));
		if($options instanceof PEAR_Error)
		{
			fputs(STDERR, $options->message."\n");
			exit(1);
		}

		foreach($options[0] as $o)
		{
			switch($o[0])
			{
				case 'h': case '--help':
					$print_usage = true;
					break;
				case 'd': case '--daemon':
					$daemon = true;
					break;
			}
		}

		if(!isset($options[1][0]))
		{
			if(!$print_usage) $error = true;
		}
		else $db_dir = $options[1][0];
	}
	else
	{
		fputs(STDERR, "Warning: PEAR package Console_Getopt does not exist. Switching to default options.\n\n");
		if(isset($_SERVER['argv'][1])) $db_dir = $_SERVER['argv'][1];
		else $error = true;
	}

	if($print_usage || $error)
	{
		if($error) $stream = STDERR;
		else $stream = STDOUT;

		fputs($stream, <<<EOF
Usage: {$_SERVER['argv'][0]} [Options] <Database directory>
Options:
  -h, --help:   Display this help and exit
  -d, --daemon: Run in background

EOF
		);

		if($error) exit(1);
		else exit(0);
	}

	if($daemon)
	{
		declare(ticks=1);

		if(function_exists('pcntl_fork')) $pid = pcntl_fork();
		else $pid = -1;

		if($pid == -1) fputs(STDERR, time_prefix()."Forking failed, continuing.\n");
		elseif($pid)
		{
			fputs(STDOUT, time_prefix()."Forked, PID ".$pid.".\n");
			exit(0);
		}
		elseif(function_exists('posix_setsid'))
			posix_setsid();
	}

	require('../engine/include.php');
	set_time_limit(0);
	define_globals($db_dir);
	$databases = get_databases();


	######################
	### Error handling ###
	######################

	$errlog = STDERR;

	function time_prefix()
	{
		return date('Y-m-d, H:i:s')."\t";
	}

	function error_handler($errno, $errstr, $errfile, $errline, $errcontext)
	{
		global $errlog;
		fputs($errlog, time_prefix());
		switch($errno)
		{
			case E_WARNING:
				fputs($errlog, "Warning: ");
				break;
			case E_NOTICE:
				fputs($errlog, "Notice: ");
				break;
			default:
				fputs($errlog, "Error ".$errno.": ");
				break;
		}

		fputs($errlog, $errstr);
		fputs($errlog, " in ".$errfile." on line ".$errline.".\n");

		global $verbose;
		if($verbose)
		{
			fputs($errlog, "Error context:\n");
			ob_start();
			var_dump($errcontext);
			$context_string = ob_get_contents();
			ob_end_clean();
			fputs($errlog, $context_string."\n");
		}
	}

	set_error_handler('error_handler', E_WARNING);
	set_error_handler('error_handler', E_NOTICE);


	############
	### SIGs ###
	############

	function sig_handler($signo)
	{
		global $errlog;
		global $daemon;
		fputs($errlog, time_prefix());
		switch($signo)
		{
			case SIGTERM:
				fputs($errlog, "SIGTERM (".SIGTERM.")\n");
				if(!defined('terminate')) define('terminate', true);
				break;
			case SIGINT:
				fputs($errlog, "SIGINT (".SIGINT.")\n");
				if(!defined('terminate')) define('terminate', true);
				break;
			case SIGHUP:
				fputs($errlog, "SIGHUP (".SIGHUP.")\n");
				if(!$daemon && !defined('terminate')) define('terminate', true);
				break;
		}
	}

	if(function_exists('pcntl_signal'))
	{
		pcntl_signal(SIGTERM, "sig_handler");
		pcntl_signal(SIGINT, "sig_handler");
		pcntl_signal(SIGHUP, "sig_handler");
	}


	######################
	### Jabber scripts ###
	######################

	$messengers = get_messenger_info();
	$auth_info = get_messenger_info('jabber');
	if(!$auth_info || !isset($auth_info['username']) || !isset($auth_info['password']))
	{
		fputs(STDERR, "No Jabber account information. Aborting.\n");
		exit(1);
	}

	$jabber = new Jabber();
	$jabber->server = $jabber_transport_services['jabber'];
	$jabber->port = 5222;
	$jabber->username = $auth_info['username'];
	$jabber->password = $auth_info['password'];
	$jabber->resource = false;

	function connect_jabber()
	{
		global $jabber;
		global $auth_info;
		global $messengers;
		global $jabber_transport_services;

		if(!$jabber->Connect()) return false;
		if(!$jabber->SendAuth()) return false;
		$jabber->SendPresence(NULL, NULL, "online");

		# Transports
		foreach($messengers as $m=>$ai)
		{
			if($m == 'jabber') continue;
			if(!isset($ai['username']) || !isset($ai['password'])) continue;

			$m = strtolower($m);
			if(!isset($jabber_transport_services[$m])) continue;

			$jabber->TransportRegistration($jabber_transport_services[$m], $ai);
		}

		return true;
	}

	if(!connect_jabber())
	{
		fputs(STDERR, "Could not connect to Jabber server.\n");
		exit(1);
	}

	$imfile = Classes::IMFile();

	while(true)
	{
		if(defined('terminate'))
		{
			$jabber->Disconnect();
			fputs($errlog, "Terminated.\n");
			exit(0);
		}

		if(!$jabber->connected)
		{
			fputs($errlog, time_prefix()."Disconnected. Trying to reconnect.\n");
			$tries = 60;
			$sleep = 5;
			for($i=1; $i <= $tries && !$jabber->connected; $i++)
			{
				fputs($errlog, time_prefix()."Reconnection attempt ".$i." of ".$tries.".\n");
				connect_jabber();
			}
			if($jabber_connected)
			{
				fputs($errlog, time_prefix()."Reconnected!\n");
			}
			else
			{
				fputs($errlog, time_prefix()."Couldn't reconnect. Terminating.\n");
				exit(2);
			}
		}

		while($next_notification = $imfile->shiftNextMessage())
		{
			$to = $next_notification['uin'];
			if($next_notification['protocol'] != 'jabber')
			{
				if(!isset($jabber_transport_services[$next_notification['protocol']]))
					continue;
				$to .= '@'.$jabber_transport_services[$next_notification['protocol']];
			}

			$message = "Automatische Benachrichtigung von http://s-u-a.net/, ".$databases[$next_notification['database']][1].", ".$next_notification['username'].":\n";
			$message .= $next_notification['message'];

			$jabber->SendMessage($to, 'normal', NULL, array('body' => htmlspecialchars($message)));
		}

		$jabber->Listen();
		while($p = array_shift($jabber->packet_queue))
		{
			if(isset($p['message']))
			{
				$message = $p['message']['#']['body'][0]['#'];
				list($from) = explode('/', $p['message']['@']['from'], 2);
				$transport = 'jabber';
				foreach($jabber_transport_services as $tn=>$t)
				{
					if(substr($from, -strlen($t)-1) == '@'.$t)
					{
						$transport = $tn;
						$from = substr($from, 0, -strlen($t)-1);
						break;
					}
				}

				$username = $imfile->checkCheckID($from, $transport, $message);
				if($username)
				{
					$user = new User($username);
					if($user->getStatus() == 1 && $user->doSetNotificationType($from, $transport))
					{
						$imfile->removeChecks($username);
						$user->__destruct();
						unset($user);
					}
				}
			}
		}

		sleep($check_every_seconds);
	}
?>
